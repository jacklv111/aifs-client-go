/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterAnnotationsInDataViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterAnnotationsInDataViewResponse{}

// FilterAnnotationsInDataViewResponse struct for FilterAnnotationsInDataViewResponse
type FilterAnnotationsInDataViewResponse struct {
	// the id of the filtered annotation view.
	AnnotationViewId *string `json:"annotationViewId,omitempty"`
}

// NewFilterAnnotationsInDataViewResponse instantiates a new FilterAnnotationsInDataViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterAnnotationsInDataViewResponse() *FilterAnnotationsInDataViewResponse {
	this := FilterAnnotationsInDataViewResponse{}
	return &this
}

// NewFilterAnnotationsInDataViewResponseWithDefaults instantiates a new FilterAnnotationsInDataViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterAnnotationsInDataViewResponseWithDefaults() *FilterAnnotationsInDataViewResponse {
	this := FilterAnnotationsInDataViewResponse{}
	return &this
}

// GetAnnotationViewId returns the AnnotationViewId field value if set, zero value otherwise.
func (o *FilterAnnotationsInDataViewResponse) GetAnnotationViewId() string {
	if o == nil || IsNil(o.AnnotationViewId) {
		var ret string
		return ret
	}
	return *o.AnnotationViewId
}

// GetAnnotationViewIdOk returns a tuple with the AnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterAnnotationsInDataViewResponse) GetAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationViewId) {
		return nil, false
	}
	return o.AnnotationViewId, true
}

// HasAnnotationViewId returns a boolean if a field has been set.
func (o *FilterAnnotationsInDataViewResponse) HasAnnotationViewId() bool {
	if o != nil && !IsNil(o.AnnotationViewId) {
		return true
	}

	return false
}

// SetAnnotationViewId gets a reference to the given string and assigns it to the AnnotationViewId field.
func (o *FilterAnnotationsInDataViewResponse) SetAnnotationViewId(v string) {
	o.AnnotationViewId = &v
}

func (o FilterAnnotationsInDataViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterAnnotationsInDataViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnnotationViewId) {
		toSerialize["annotationViewId"] = o.AnnotationViewId
	}
	return toSerialize, nil
}

type NullableFilterAnnotationsInDataViewResponse struct {
	value *FilterAnnotationsInDataViewResponse
	isSet bool
}

func (v NullableFilterAnnotationsInDataViewResponse) Get() *FilterAnnotationsInDataViewResponse {
	return v.value
}

func (v *NullableFilterAnnotationsInDataViewResponse) Set(val *FilterAnnotationsInDataViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterAnnotationsInDataViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterAnnotationsInDataViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterAnnotationsInDataViewResponse(val *FilterAnnotationsInDataViewResponse) *NullableFilterAnnotationsInDataViewResponse {
	return &NullableFilterAnnotationsInDataViewResponse{value: val, isSet: true}
}

func (v NullableFilterAnnotationsInDataViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterAnnotationsInDataViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


