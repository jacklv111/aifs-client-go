/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the CreateAnnotationTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAnnotationTemplateRequest{}

// CreateAnnotationTemplateRequest struct for CreateAnnotationTemplateRequest
type CreateAnnotationTemplateRequest struct {
	// name of the annotation template
	Name string `json:"name"`
	// the type of the annotation template
	Type string `json:"type"`
	// the description of the annotation template
	Description *string `json:"description,omitempty"`
	Labels []Label `json:"labels,omitempty"`
	WordList []string `json:"wordList,omitempty"`
}

// NewCreateAnnotationTemplateRequest instantiates a new CreateAnnotationTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAnnotationTemplateRequest(name string, type_ string) *CreateAnnotationTemplateRequest {
	this := CreateAnnotationTemplateRequest{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewCreateAnnotationTemplateRequestWithDefaults instantiates a new CreateAnnotationTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAnnotationTemplateRequestWithDefaults() *CreateAnnotationTemplateRequest {
	this := CreateAnnotationTemplateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateAnnotationTemplateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateAnnotationTemplateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateAnnotationTemplateRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CreateAnnotationTemplateRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateAnnotationTemplateRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateAnnotationTemplateRequest) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateAnnotationTemplateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAnnotationTemplateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateAnnotationTemplateRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateAnnotationTemplateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateAnnotationTemplateRequest) GetLabels() []Label {
	if o == nil || IsNil(o.Labels) {
		var ret []Label
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAnnotationTemplateRequest) GetLabelsOk() ([]Label, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateAnnotationTemplateRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *CreateAnnotationTemplateRequest) SetLabels(v []Label) {
	o.Labels = v
}

// GetWordList returns the WordList field value if set, zero value otherwise.
func (o *CreateAnnotationTemplateRequest) GetWordList() []string {
	if o == nil || IsNil(o.WordList) {
		var ret []string
		return ret
	}
	return o.WordList
}

// GetWordListOk returns a tuple with the WordList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAnnotationTemplateRequest) GetWordListOk() ([]string, bool) {
	if o == nil || IsNil(o.WordList) {
		return nil, false
	}
	return o.WordList, true
}

// HasWordList returns a boolean if a field has been set.
func (o *CreateAnnotationTemplateRequest) HasWordList() bool {
	if o != nil && !IsNil(o.WordList) {
		return true
	}

	return false
}

// SetWordList gets a reference to the given []string and assigns it to the WordList field.
func (o *CreateAnnotationTemplateRequest) SetWordList(v []string) {
	o.WordList = v
}

func (o CreateAnnotationTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAnnotationTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.WordList) {
		toSerialize["wordList"] = o.WordList
	}
	return toSerialize, nil
}

type NullableCreateAnnotationTemplateRequest struct {
	value *CreateAnnotationTemplateRequest
	isSet bool
}

func (v NullableCreateAnnotationTemplateRequest) Get() *CreateAnnotationTemplateRequest {
	return v.value
}

func (v *NullableCreateAnnotationTemplateRequest) Set(val *CreateAnnotationTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAnnotationTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAnnotationTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAnnotationTemplateRequest(val *CreateAnnotationTemplateRequest) *NullableCreateAnnotationTemplateRequest {
	return &NullableCreateAnnotationTemplateRequest{value: val, isSet: true}
}

func (v NullableCreateAnnotationTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAnnotationTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


