/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MoveDataViewItemsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveDataViewItemsRequest{}

// MoveDataViewItemsRequest struct for MoveDataViewItemsRequest
type MoveDataViewItemsRequest struct {
	// the id of the source data view
	SrcDataViewId *string `json:"srcDataViewId,omitempty"`
	// the id of the destination data view
	DstDataViewId *string `json:"dstDataViewId,omitempty"`
}

// NewMoveDataViewItemsRequest instantiates a new MoveDataViewItemsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveDataViewItemsRequest() *MoveDataViewItemsRequest {
	this := MoveDataViewItemsRequest{}
	return &this
}

// NewMoveDataViewItemsRequestWithDefaults instantiates a new MoveDataViewItemsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveDataViewItemsRequestWithDefaults() *MoveDataViewItemsRequest {
	this := MoveDataViewItemsRequest{}
	return &this
}

// GetSrcDataViewId returns the SrcDataViewId field value if set, zero value otherwise.
func (o *MoveDataViewItemsRequest) GetSrcDataViewId() string {
	if o == nil || IsNil(o.SrcDataViewId) {
		var ret string
		return ret
	}
	return *o.SrcDataViewId
}

// GetSrcDataViewIdOk returns a tuple with the SrcDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveDataViewItemsRequest) GetSrcDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.SrcDataViewId) {
		return nil, false
	}
	return o.SrcDataViewId, true
}

// HasSrcDataViewId returns a boolean if a field has been set.
func (o *MoveDataViewItemsRequest) HasSrcDataViewId() bool {
	if o != nil && !IsNil(o.SrcDataViewId) {
		return true
	}

	return false
}

// SetSrcDataViewId gets a reference to the given string and assigns it to the SrcDataViewId field.
func (o *MoveDataViewItemsRequest) SetSrcDataViewId(v string) {
	o.SrcDataViewId = &v
}

// GetDstDataViewId returns the DstDataViewId field value if set, zero value otherwise.
func (o *MoveDataViewItemsRequest) GetDstDataViewId() string {
	if o == nil || IsNil(o.DstDataViewId) {
		var ret string
		return ret
	}
	return *o.DstDataViewId
}

// GetDstDataViewIdOk returns a tuple with the DstDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveDataViewItemsRequest) GetDstDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.DstDataViewId) {
		return nil, false
	}
	return o.DstDataViewId, true
}

// HasDstDataViewId returns a boolean if a field has been set.
func (o *MoveDataViewItemsRequest) HasDstDataViewId() bool {
	if o != nil && !IsNil(o.DstDataViewId) {
		return true
	}

	return false
}

// SetDstDataViewId gets a reference to the given string and assigns it to the DstDataViewId field.
func (o *MoveDataViewItemsRequest) SetDstDataViewId(v string) {
	o.DstDataViewId = &v
}

func (o MoveDataViewItemsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveDataViewItemsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SrcDataViewId) {
		toSerialize["srcDataViewId"] = o.SrcDataViewId
	}
	if !IsNil(o.DstDataViewId) {
		toSerialize["dstDataViewId"] = o.DstDataViewId
	}
	return toSerialize, nil
}

type NullableMoveDataViewItemsRequest struct {
	value *MoveDataViewItemsRequest
	isSet bool
}

func (v NullableMoveDataViewItemsRequest) Get() *MoveDataViewItemsRequest {
	return v.value
}

func (v *NullableMoveDataViewItemsRequest) Set(val *MoveDataViewItemsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveDataViewItemsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveDataViewItemsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveDataViewItemsRequest(val *MoveDataViewItemsRequest) *NullableMoveDataViewItemsRequest {
	return &NullableMoveDataViewItemsRequest{value: val, isSet: true}
}

func (v NullableMoveDataViewItemsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveDataViewItemsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


