/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
	"fmt"
)

// ZipFormat the structure of the files in zip file
type ZipFormat string

// List of ZipFormat
const (
	IMAGE_CLASSIFICATION ZipFormat = "image-classification"
	RGBD_BOUNDING_BOX_2D_AND_3D ZipFormat = "rgbd-bounding-box-2d-and-3d"
	IMAGE_SEGMENTATION_MASKS ZipFormat = "image-segmentation-masks"
	OCR ZipFormat = "ocr"
	COCO ZipFormat = "coco"
	RAW_DATA_IMAGES ZipFormat = "raw-data-images"
	SAM ZipFormat = "sam"
	POINTS_3D_ZIP ZipFormat = "points-3d-zip"
)

// All allowed values of ZipFormat enum
var AllowedZipFormatEnumValues = []ZipFormat{
	"image-classification",
	"rgbd-bounding-box-2d-and-3d",
	"image-segmentation-masks",
	"ocr",
	"coco",
	"raw-data-images",
	"sam",
	"points-3d-zip",
}

func (v *ZipFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZipFormat(value)
	for _, existing := range AllowedZipFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZipFormat", value)
}

// NewZipFormatFromValue returns a pointer to a valid ZipFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZipFormatFromValue(v string) (*ZipFormat, error) {
	ev := ZipFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZipFormat: valid values are %v", v, AllowedZipFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZipFormat) IsValid() bool {
	for _, existing := range AllowedZipFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ZipFormat value
func (v ZipFormat) Ptr() *ZipFormat {
	return &v
}

type NullableZipFormat struct {
	value *ZipFormat
	isSet bool
}

func (v NullableZipFormat) Get() *ZipFormat {
	return v.value
}

func (v *NullableZipFormat) Set(val *ZipFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableZipFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableZipFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZipFormat(val *ZipFormat) *NullableZipFormat {
	return &NullableZipFormat{value: val, isSet: true}
}

func (v NullableZipFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZipFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

