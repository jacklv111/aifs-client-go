/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the Label type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Label{}

// Label struct for Label
type Label struct {
	// the id of the label
	Id *string `json:"id,omitempty"`
	// the name of the label
	Name string `json:"name"`
	// the super category name
	SuperCategoryName *string `json:"superCategoryName,omitempty"`
	Color int32 `json:"color"`
	// the defination of the key points
	KeyPointDef []string `json:"keyPointDef,omitempty"`
	KeyPointSkeleton [][]int32 `json:"keyPointSkeleton,omitempty"`
	CoverImageUrl *string `json:"coverImageUrl,omitempty"`
}

// NewLabel instantiates a new Label object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabel(name string, color int32) *Label {
	this := Label{}
	this.Name = name
	this.Color = color
	return &this
}

// NewLabelWithDefaults instantiates a new Label object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelWithDefaults() *Label {
	this := Label{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Label) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Label) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Label) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Label) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Label) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Label) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Label) SetName(v string) {
	o.Name = v
}

// GetSuperCategoryName returns the SuperCategoryName field value if set, zero value otherwise.
func (o *Label) GetSuperCategoryName() string {
	if o == nil || IsNil(o.SuperCategoryName) {
		var ret string
		return ret
	}
	return *o.SuperCategoryName
}

// GetSuperCategoryNameOk returns a tuple with the SuperCategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Label) GetSuperCategoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.SuperCategoryName) {
		return nil, false
	}
	return o.SuperCategoryName, true
}

// HasSuperCategoryName returns a boolean if a field has been set.
func (o *Label) HasSuperCategoryName() bool {
	if o != nil && !IsNil(o.SuperCategoryName) {
		return true
	}

	return false
}

// SetSuperCategoryName gets a reference to the given string and assigns it to the SuperCategoryName field.
func (o *Label) SetSuperCategoryName(v string) {
	o.SuperCategoryName = &v
}

// GetColor returns the Color field value
func (o *Label) GetColor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *Label) GetColorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *Label) SetColor(v int32) {
	o.Color = v
}

// GetKeyPointDef returns the KeyPointDef field value if set, zero value otherwise.
func (o *Label) GetKeyPointDef() []string {
	if o == nil || IsNil(o.KeyPointDef) {
		var ret []string
		return ret
	}
	return o.KeyPointDef
}

// GetKeyPointDefOk returns a tuple with the KeyPointDef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Label) GetKeyPointDefOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyPointDef) {
		return nil, false
	}
	return o.KeyPointDef, true
}

// HasKeyPointDef returns a boolean if a field has been set.
func (o *Label) HasKeyPointDef() bool {
	if o != nil && !IsNil(o.KeyPointDef) {
		return true
	}

	return false
}

// SetKeyPointDef gets a reference to the given []string and assigns it to the KeyPointDef field.
func (o *Label) SetKeyPointDef(v []string) {
	o.KeyPointDef = v
}

// GetKeyPointSkeleton returns the KeyPointSkeleton field value if set, zero value otherwise.
func (o *Label) GetKeyPointSkeleton() [][]int32 {
	if o == nil || IsNil(o.KeyPointSkeleton) {
		var ret [][]int32
		return ret
	}
	return o.KeyPointSkeleton
}

// GetKeyPointSkeletonOk returns a tuple with the KeyPointSkeleton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Label) GetKeyPointSkeletonOk() ([][]int32, bool) {
	if o == nil || IsNil(o.KeyPointSkeleton) {
		return nil, false
	}
	return o.KeyPointSkeleton, true
}

// HasKeyPointSkeleton returns a boolean if a field has been set.
func (o *Label) HasKeyPointSkeleton() bool {
	if o != nil && !IsNil(o.KeyPointSkeleton) {
		return true
	}

	return false
}

// SetKeyPointSkeleton gets a reference to the given [][]int32 and assigns it to the KeyPointSkeleton field.
func (o *Label) SetKeyPointSkeleton(v [][]int32) {
	o.KeyPointSkeleton = v
}

// GetCoverImageUrl returns the CoverImageUrl field value if set, zero value otherwise.
func (o *Label) GetCoverImageUrl() string {
	if o == nil || IsNil(o.CoverImageUrl) {
		var ret string
		return ret
	}
	return *o.CoverImageUrl
}

// GetCoverImageUrlOk returns a tuple with the CoverImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Label) GetCoverImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CoverImageUrl) {
		return nil, false
	}
	return o.CoverImageUrl, true
}

// HasCoverImageUrl returns a boolean if a field has been set.
func (o *Label) HasCoverImageUrl() bool {
	if o != nil && !IsNil(o.CoverImageUrl) {
		return true
	}

	return false
}

// SetCoverImageUrl gets a reference to the given string and assigns it to the CoverImageUrl field.
func (o *Label) SetCoverImageUrl(v string) {
	o.CoverImageUrl = &v
}

func (o Label) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Label) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SuperCategoryName) {
		toSerialize["superCategoryName"] = o.SuperCategoryName
	}
	toSerialize["color"] = o.Color
	if !IsNil(o.KeyPointDef) {
		toSerialize["keyPointDef"] = o.KeyPointDef
	}
	if !IsNil(o.KeyPointSkeleton) {
		toSerialize["keyPointSkeleton"] = o.KeyPointSkeleton
	}
	if !IsNil(o.CoverImageUrl) {
		toSerialize["coverImageUrl"] = o.CoverImageUrl
	}
	return toSerialize, nil
}

type NullableLabel struct {
	value *Label
	isSet bool
}

func (v NullableLabel) Get() *Label {
	return v.value
}

func (v *NullableLabel) Set(val *Label) {
	v.value = val
	v.isSet = true
}

func (v NullableLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabel(val *Label) *NullableLabel {
	return &NullableLabel{value: val, isSet: true}
}

func (v NullableLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


