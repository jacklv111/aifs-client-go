/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the UpdateDatasetZipRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDatasetZipRequest{}

// UpdateDatasetZipRequest struct for UpdateDatasetZipRequest
type UpdateDatasetZipRequest struct {
	Progress *float32 `json:"progress,omitempty"`
	Status *string `json:"status,omitempty"`
	TrainRawDataViewId *string `json:"trainRawDataViewId,omitempty"`
	TrainAnnotationViewId *string `json:"trainAnnotationViewId,omitempty"`
	ValRawDataViewId *string `json:"valRawDataViewId,omitempty"`
	ValAnnotationViewId *string `json:"valAnnotationViewId,omitempty"`
	AnnotationTemplateId *string `json:"annotationTemplateId,omitempty"`
	RawDataViewId *string `json:"rawDataViewId,omitempty"`
	AnnotationViewId *string `json:"annotationViewId,omitempty"`
}

// NewUpdateDatasetZipRequest instantiates a new UpdateDatasetZipRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatasetZipRequest() *UpdateDatasetZipRequest {
	this := UpdateDatasetZipRequest{}
	return &this
}

// NewUpdateDatasetZipRequestWithDefaults instantiates a new UpdateDatasetZipRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatasetZipRequestWithDefaults() *UpdateDatasetZipRequest {
	this := UpdateDatasetZipRequest{}
	return &this
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetProgress() float32 {
	if o == nil || IsNil(o.Progress) {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *UpdateDatasetZipRequest) SetProgress(v float32) {
	o.Progress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UpdateDatasetZipRequest) SetStatus(v string) {
	o.Status = &v
}

// GetTrainRawDataViewId returns the TrainRawDataViewId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetTrainRawDataViewId() string {
	if o == nil || IsNil(o.TrainRawDataViewId) {
		var ret string
		return ret
	}
	return *o.TrainRawDataViewId
}

// GetTrainRawDataViewIdOk returns a tuple with the TrainRawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetTrainRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.TrainRawDataViewId) {
		return nil, false
	}
	return o.TrainRawDataViewId, true
}

// HasTrainRawDataViewId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasTrainRawDataViewId() bool {
	if o != nil && !IsNil(o.TrainRawDataViewId) {
		return true
	}

	return false
}

// SetTrainRawDataViewId gets a reference to the given string and assigns it to the TrainRawDataViewId field.
func (o *UpdateDatasetZipRequest) SetTrainRawDataViewId(v string) {
	o.TrainRawDataViewId = &v
}

// GetTrainAnnotationViewId returns the TrainAnnotationViewId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetTrainAnnotationViewId() string {
	if o == nil || IsNil(o.TrainAnnotationViewId) {
		var ret string
		return ret
	}
	return *o.TrainAnnotationViewId
}

// GetTrainAnnotationViewIdOk returns a tuple with the TrainAnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetTrainAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.TrainAnnotationViewId) {
		return nil, false
	}
	return o.TrainAnnotationViewId, true
}

// HasTrainAnnotationViewId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasTrainAnnotationViewId() bool {
	if o != nil && !IsNil(o.TrainAnnotationViewId) {
		return true
	}

	return false
}

// SetTrainAnnotationViewId gets a reference to the given string and assigns it to the TrainAnnotationViewId field.
func (o *UpdateDatasetZipRequest) SetTrainAnnotationViewId(v string) {
	o.TrainAnnotationViewId = &v
}

// GetValRawDataViewId returns the ValRawDataViewId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetValRawDataViewId() string {
	if o == nil || IsNil(o.ValRawDataViewId) {
		var ret string
		return ret
	}
	return *o.ValRawDataViewId
}

// GetValRawDataViewIdOk returns a tuple with the ValRawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetValRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValRawDataViewId) {
		return nil, false
	}
	return o.ValRawDataViewId, true
}

// HasValRawDataViewId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasValRawDataViewId() bool {
	if o != nil && !IsNil(o.ValRawDataViewId) {
		return true
	}

	return false
}

// SetValRawDataViewId gets a reference to the given string and assigns it to the ValRawDataViewId field.
func (o *UpdateDatasetZipRequest) SetValRawDataViewId(v string) {
	o.ValRawDataViewId = &v
}

// GetValAnnotationViewId returns the ValAnnotationViewId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetValAnnotationViewId() string {
	if o == nil || IsNil(o.ValAnnotationViewId) {
		var ret string
		return ret
	}
	return *o.ValAnnotationViewId
}

// GetValAnnotationViewIdOk returns a tuple with the ValAnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetValAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValAnnotationViewId) {
		return nil, false
	}
	return o.ValAnnotationViewId, true
}

// HasValAnnotationViewId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasValAnnotationViewId() bool {
	if o != nil && !IsNil(o.ValAnnotationViewId) {
		return true
	}

	return false
}

// SetValAnnotationViewId gets a reference to the given string and assigns it to the ValAnnotationViewId field.
func (o *UpdateDatasetZipRequest) SetValAnnotationViewId(v string) {
	o.ValAnnotationViewId = &v
}

// GetAnnotationTemplateId returns the AnnotationTemplateId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetAnnotationTemplateId() string {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateId
}

// GetAnnotationTemplateIdOk returns a tuple with the AnnotationTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetAnnotationTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		return nil, false
	}
	return o.AnnotationTemplateId, true
}

// HasAnnotationTemplateId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasAnnotationTemplateId() bool {
	if o != nil && !IsNil(o.AnnotationTemplateId) {
		return true
	}

	return false
}

// SetAnnotationTemplateId gets a reference to the given string and assigns it to the AnnotationTemplateId field.
func (o *UpdateDatasetZipRequest) SetAnnotationTemplateId(v string) {
	o.AnnotationTemplateId = &v
}

// GetRawDataViewId returns the RawDataViewId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetRawDataViewId() string {
	if o == nil || IsNil(o.RawDataViewId) {
		var ret string
		return ret
	}
	return *o.RawDataViewId
}

// GetRawDataViewIdOk returns a tuple with the RawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.RawDataViewId) {
		return nil, false
	}
	return o.RawDataViewId, true
}

// HasRawDataViewId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasRawDataViewId() bool {
	if o != nil && !IsNil(o.RawDataViewId) {
		return true
	}

	return false
}

// SetRawDataViewId gets a reference to the given string and assigns it to the RawDataViewId field.
func (o *UpdateDatasetZipRequest) SetRawDataViewId(v string) {
	o.RawDataViewId = &v
}

// GetAnnotationViewId returns the AnnotationViewId field value if set, zero value otherwise.
func (o *UpdateDatasetZipRequest) GetAnnotationViewId() string {
	if o == nil || IsNil(o.AnnotationViewId) {
		var ret string
		return ret
	}
	return *o.AnnotationViewId
}

// GetAnnotationViewIdOk returns a tuple with the AnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetZipRequest) GetAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationViewId) {
		return nil, false
	}
	return o.AnnotationViewId, true
}

// HasAnnotationViewId returns a boolean if a field has been set.
func (o *UpdateDatasetZipRequest) HasAnnotationViewId() bool {
	if o != nil && !IsNil(o.AnnotationViewId) {
		return true
	}

	return false
}

// SetAnnotationViewId gets a reference to the given string and assigns it to the AnnotationViewId field.
func (o *UpdateDatasetZipRequest) SetAnnotationViewId(v string) {
	o.AnnotationViewId = &v
}

func (o UpdateDatasetZipRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDatasetZipRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TrainRawDataViewId) {
		toSerialize["trainRawDataViewId"] = o.TrainRawDataViewId
	}
	if !IsNil(o.TrainAnnotationViewId) {
		toSerialize["trainAnnotationViewId"] = o.TrainAnnotationViewId
	}
	if !IsNil(o.ValRawDataViewId) {
		toSerialize["valRawDataViewId"] = o.ValRawDataViewId
	}
	if !IsNil(o.ValAnnotationViewId) {
		toSerialize["valAnnotationViewId"] = o.ValAnnotationViewId
	}
	if !IsNil(o.AnnotationTemplateId) {
		toSerialize["annotationTemplateId"] = o.AnnotationTemplateId
	}
	if !IsNil(o.RawDataViewId) {
		toSerialize["rawDataViewId"] = o.RawDataViewId
	}
	if !IsNil(o.AnnotationViewId) {
		toSerialize["annotationViewId"] = o.AnnotationViewId
	}
	return toSerialize, nil
}

type NullableUpdateDatasetZipRequest struct {
	value *UpdateDatasetZipRequest
	isSet bool
}

func (v NullableUpdateDatasetZipRequest) Get() *UpdateDatasetZipRequest {
	return v.value
}

func (v *NullableUpdateDatasetZipRequest) Set(val *UpdateDatasetZipRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatasetZipRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatasetZipRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatasetZipRequest(val *UpdateDatasetZipRequest) *NullableUpdateDatasetZipRequest {
	return &NullableUpdateDatasetZipRequest{value: val, isSet: true}
}

func (v NullableUpdateDatasetZipRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatasetZipRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


