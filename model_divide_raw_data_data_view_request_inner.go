/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DivideRawDataDataViewRequestInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DivideRawDataDataViewRequestInner{}

// DivideRawDataDataViewRequestInner struct for DivideRawDataDataViewRequestInner
type DivideRawDataDataViewRequestInner struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Ratio *int32 `json:"ratio,omitempty"`
}

// NewDivideRawDataDataViewRequestInner instantiates a new DivideRawDataDataViewRequestInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDivideRawDataDataViewRequestInner() *DivideRawDataDataViewRequestInner {
	this := DivideRawDataDataViewRequestInner{}
	return &this
}

// NewDivideRawDataDataViewRequestInnerWithDefaults instantiates a new DivideRawDataDataViewRequestInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDivideRawDataDataViewRequestInnerWithDefaults() *DivideRawDataDataViewRequestInner {
	this := DivideRawDataDataViewRequestInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DivideRawDataDataViewRequestInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideRawDataDataViewRequestInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DivideRawDataDataViewRequestInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DivideRawDataDataViewRequestInner) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DivideRawDataDataViewRequestInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideRawDataDataViewRequestInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DivideRawDataDataViewRequestInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DivideRawDataDataViewRequestInner) SetDescription(v string) {
	o.Description = &v
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *DivideRawDataDataViewRequestInner) GetRatio() int32 {
	if o == nil || IsNil(o.Ratio) {
		var ret int32
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideRawDataDataViewRequestInner) GetRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.Ratio) {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *DivideRawDataDataViewRequestInner) HasRatio() bool {
	if o != nil && !IsNil(o.Ratio) {
		return true
	}

	return false
}

// SetRatio gets a reference to the given int32 and assigns it to the Ratio field.
func (o *DivideRawDataDataViewRequestInner) SetRatio(v int32) {
	o.Ratio = &v
}

func (o DivideRawDataDataViewRequestInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DivideRawDataDataViewRequestInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Ratio) {
		toSerialize["ratio"] = o.Ratio
	}
	return toSerialize, nil
}

type NullableDivideRawDataDataViewRequestInner struct {
	value *DivideRawDataDataViewRequestInner
	isSet bool
}

func (v NullableDivideRawDataDataViewRequestInner) Get() *DivideRawDataDataViewRequestInner {
	return v.value
}

func (v *NullableDivideRawDataDataViewRequestInner) Set(val *DivideRawDataDataViewRequestInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDivideRawDataDataViewRequestInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDivideRawDataDataViewRequestInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivideRawDataDataViewRequestInner(val *DivideRawDataDataViewRequestInner) *NullableDivideRawDataDataViewRequestInner {
	return &NullableDivideRawDataDataViewRequestInner{value: val, isSet: true}
}

func (v NullableDivideRawDataDataViewRequestInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivideRawDataDataViewRequestInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


