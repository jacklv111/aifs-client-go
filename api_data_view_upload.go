/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"fmt"
)


// DataViewUploadApiService DataViewUploadApi service
type DataViewUploadApiService service

type ApiUploadAnnotationToDataViewRequest struct {
	ctx context.Context
	ApiService *DataViewUploadApiService
	dataViewId string
	fileMeta []byte
	files []FormFile
}
type FormFile struct {
	Key string
	FileName string
	Value []byte
}
func (r ApiUploadAnnotationToDataViewRequest) FileMeta(fileMeta []byte) ApiUploadAnnotationToDataViewRequest {
	r.fileMeta = fileMeta
	return r
}

func (r ApiUploadAnnotationToDataViewRequest) Files(files []FormFile) ApiUploadAnnotationToDataViewRequest {
	r.files = files
	return r
}

func (r ApiUploadAnnotationToDataViewRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadAnnotationToDataViewExecute(r)
}


/*
UploadAnnotationToDataView Upload annotations to data view

Upload annotations to data view

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataViewId The id of a data view
 @return ApiUploadAnnotationToDataViewRequest
*/
func (a *DataViewUploadApiService) UploadAnnotationToDataView(ctx context.Context, dataViewId string) ApiUploadAnnotationToDataViewRequest {
	return ApiUploadAnnotationToDataViewRequest{
		ApiService: a,
		ctx: ctx,
		dataViewId: dataViewId,
	}
}

// Execute executes the request
func (a *DataViewUploadApiService) UploadAnnotationToDataViewExecute(r ApiUploadAnnotationToDataViewRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataViewUploadApiService.UploadAnnotationToDataView")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-views/{dataViewId}/annotations"
	localVarPath = strings.Replace(localVarPath, "{"+"dataViewId"+"}", url.PathEscape(parameterValueToString(r.dataViewId, "dataViewId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	if r.fileMeta != nil {
		formFiles = append(formFiles, formFile{fileBytes: r.fileMeta, fileName: "fileMeta", formFileName: "fileMeta"})
	}

	if r.files != nil {
		for _, file := range r.files {
			formFiles = append(formFiles, formFile{fileBytes: file.Value, fileName: file.FileName, formFileName: file.Key})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}


type ApiUploadDatasetZipToDataViewRequest struct {
	ctx context.Context
	ApiService *DataViewUploadApiService
	dataViewId string
	xFileName *string
	body io.Reader
}

func (r ApiUploadDatasetZipToDataViewRequest) XFileName(xFileName string) ApiUploadDatasetZipToDataViewRequest {
	r.xFileName = &xFileName
	return r
}

func (r ApiUploadDatasetZipToDataViewRequest) Body(body io.Reader) ApiUploadDatasetZipToDataViewRequest {
	r.body = body
	return r
}

func (r ApiUploadDatasetZipToDataViewRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadDatasetZipToDataViewExecute(r)
}

/*
UploadDatasetZipToDataView Upload dataset zip

Upload dataset zip

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataViewId The id of a data view
 @return ApiUploadDatasetZipToDataViewRequest
*/
func (a *DataViewUploadApiService) UploadDatasetZipToDataView(ctx context.Context, dataViewId string) ApiUploadDatasetZipToDataViewRequest {
	return ApiUploadDatasetZipToDataViewRequest{
		ApiService: a,
		ctx: ctx,
		dataViewId: dataViewId,
	}
}

// Execute executes the request
func (a *DataViewUploadApiService) UploadDatasetZipToDataViewExecute(r ApiUploadDatasetZipToDataViewRequest) (*http.Response, error) {
	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataViewUploadApiService.UploadDatasetZipToDataView")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-views/{dataViewId}/dataset-zip"
	localVarPath = strings.Replace(localVarPath, "{"+"dataViewId"+"}", url.PathEscape(parameterValueToString(r.dataViewId, "dataViewId")), -1)


	if r.xFileName == nil {
		return nil, reportError("xFileName is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	pr, pw := io.Pipe()

	go func() {
		defer pw.Close()

		bufferSize := 32 * 1024 * 1024 // 32MB
		buffer := make([]byte, bufferSize)

		// Copy the file data to the pipe writer
		_, err = io.CopyBuffer(pw, r.body, buffer)
		if err != nil {
			pw.CloseWithError(err)
			return
		}
	}()

	req, err := http.NewRequest(http.MethodPost, localVarPath, pr)
	req.Header.Set("Content-Type", "application/octet-stream")
	req.Header.Set("X-File-Name", *r.xFileName)

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUploadFileToDataViewRequest struct {
	ctx context.Context
	ApiService *DataViewUploadApiService
	dataViewId string
	xFileName *string
	body *os.File
}

func (r ApiUploadFileToDataViewRequest) XFileName(xFileName string) ApiUploadFileToDataViewRequest {
	r.xFileName = &xFileName
	return r
}

func (r ApiUploadFileToDataViewRequest) Body(body *os.File) ApiUploadFileToDataViewRequest {
	r.body = body
	return r
}

func (r ApiUploadFileToDataViewRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadFileToDataViewExecute(r)
}

/*
UploadFileToDataView Upload file to data view

Upload file to data view

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataViewId The id of a data view
 @return ApiUploadFileToDataViewRequest
*/
func (a *DataViewUploadApiService) UploadFileToDataView(ctx context.Context, dataViewId string) ApiUploadFileToDataViewRequest {
	return ApiUploadFileToDataViewRequest{
		ApiService: a,
		ctx: ctx,
		dataViewId: dataViewId,
	}
}

// Execute executes the request
func (a *DataViewUploadApiService) UploadFileToDataViewExecute(r ApiUploadFileToDataViewRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataViewUploadApiService.UploadFileToDataView")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-views/{dataViewId}/artifact"
	localVarPath = strings.Replace(localVarPath, "{"+"dataViewId"+"}", url.PathEscape(parameterValueToString(r.dataViewId, "dataViewId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xFileName == nil {
		return nil, reportError("xFileName is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-File-Name", r.xFileName, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUploadModelDataToDataViewRequest struct {
	ctx context.Context
	ApiService *DataViewUploadApiService
	dataViewId string
	commitId *string
	progress *string
	modelJit *os.File
	onnx *os.File
	dynamicOnnx *os.File
	configPy *os.File
	bestPth *os.File
	lastPth *os.File
	outputTemplate *os.File
	logs []*os.File
}

func (r ApiUploadModelDataToDataViewRequest) CommitId(commitId string) ApiUploadModelDataToDataViewRequest {
	r.commitId = &commitId
	return r
}

func (r ApiUploadModelDataToDataViewRequest) Progress(progress string) ApiUploadModelDataToDataViewRequest {
	r.progress = &progress
	return r
}

func (r ApiUploadModelDataToDataViewRequest) ModelJit(modelJit *os.File) ApiUploadModelDataToDataViewRequest {
	r.modelJit = modelJit
	return r
}

func (r ApiUploadModelDataToDataViewRequest) Onnx(onnx *os.File) ApiUploadModelDataToDataViewRequest {
	r.onnx = onnx
	return r
}

func (r ApiUploadModelDataToDataViewRequest) DynamicOnnx(dynamicOnnx *os.File) ApiUploadModelDataToDataViewRequest {
	r.dynamicOnnx = dynamicOnnx
	return r
}

func (r ApiUploadModelDataToDataViewRequest) ConfigPy(configPy *os.File) ApiUploadModelDataToDataViewRequest {
	r.configPy = configPy
	return r
}

func (r ApiUploadModelDataToDataViewRequest) BestPth(bestPth *os.File) ApiUploadModelDataToDataViewRequest {
	r.bestPth = bestPth
	return r
}

func (r ApiUploadModelDataToDataViewRequest) LastPth(lastPth *os.File) ApiUploadModelDataToDataViewRequest {
	r.lastPth = lastPth
	return r
}

func (r ApiUploadModelDataToDataViewRequest) OutputTemplate(outputTemplate *os.File) ApiUploadModelDataToDataViewRequest {
	r.outputTemplate = outputTemplate
	return r
}

func (r ApiUploadModelDataToDataViewRequest) Logs(logs []*os.File) ApiUploadModelDataToDataViewRequest {
	r.logs = logs
	return r
}

func (r ApiUploadModelDataToDataViewRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadModelDataToDataViewExecute(r)
}

/*
UploadModelDataToDataView Upload model data to data view

Upload model data to data view

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataViewId The id of a data view
 @return ApiUploadModelDataToDataViewRequest
*/
func (a *DataViewUploadApiService) UploadModelDataToDataView(ctx context.Context, dataViewId string) ApiUploadModelDataToDataViewRequest {
	return ApiUploadModelDataToDataViewRequest{
		ApiService: a,
		ctx: ctx,
		dataViewId: dataViewId,
	}
}

// Execute executes the request
func (a *DataViewUploadApiService) UploadModelDataToDataViewExecute(r ApiUploadModelDataToDataViewRequest) (*http.Response, error) {
	return nil, fmt.Errorf("upload model data to data view is not completed")
}

type ApiUploadRawDataToDataViewRequest struct {
	ctx context.Context
	ApiService *DataViewUploadApiService
	dataViewId string
	files []FormFile
	fileMeta *FormFile
}


func (r ApiUploadRawDataToDataViewRequest) Files(files []FormFile) ApiUploadRawDataToDataViewRequest {
	r.files = files
	return r
}

func (r ApiUploadRawDataToDataViewRequest) FileMeta(file FormFile) ApiUploadRawDataToDataViewRequest {
	r.fileMeta = &file
	return r
}

func (r ApiUploadRawDataToDataViewRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadRawDataToDataViewExecute(r)
}


/*
UploadRawDataToDataView Upload raw data to data view

Upload raw data to data view

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataViewId The id of a data view
 @return ApiUploadRawDataToDataViewRequest
*/
func (a *DataViewUploadApiService) UploadRawDataToDataView(ctx context.Context, dataViewId string) ApiUploadRawDataToDataViewRequest {
	return ApiUploadRawDataToDataViewRequest{
		ApiService: a,
		ctx: ctx,
		dataViewId: dataViewId,
	}
}

// Execute executes the request
func (a *DataViewUploadApiService) UploadRawDataToDataViewExecute(r ApiUploadRawDataToDataViewRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataViewUploadApiService.UploadRawDataToDataView")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-views/{dataViewId}/raw-data"
	localVarPath = strings.Replace(localVarPath, "{"+"dataViewId"+"}", url.PathEscape(parameterValueToString(r.dataViewId, "dataViewId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.fileMeta != nil {
		formFiles = append(formFiles, formFile{fileBytes: r.fileMeta.Value, fileName: r.fileMeta.FileName, formFileName: r.fileMeta.Key})
	}
	if r.files != nil {
		for _, file := range r.files {
			formFiles = append(formFiles, formFile{fileBytes: file.Value, fileName: file.FileName, formFileName: file.Key})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
