/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AnnotationTemplateApiService AnnotationTemplateApi service
type AnnotationTemplateApiService service

type ApiCopyAnnotationTemplateRequest struct {
	ctx context.Context
	ApiService *AnnotationTemplateApiService
	annotationTemplateId string
}

func (r ApiCopyAnnotationTemplateRequest) Execute() (*CopyAnnotationTemplate200Response, *http.Response, error) {
	return r.ApiService.CopyAnnotationTemplateExecute(r)
}

/*
CopyAnnotationTemplate Copy an annotation template

Copy an annotation template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param annotationTemplateId The id of an annotation template
 @return ApiCopyAnnotationTemplateRequest
*/
func (a *AnnotationTemplateApiService) CopyAnnotationTemplate(ctx context.Context, annotationTemplateId string) ApiCopyAnnotationTemplateRequest {
	return ApiCopyAnnotationTemplateRequest{
		ApiService: a,
		ctx: ctx,
		annotationTemplateId: annotationTemplateId,
	}
}

// Execute executes the request
//  @return CopyAnnotationTemplate200Response
func (a *AnnotationTemplateApiService) CopyAnnotationTemplateExecute(r ApiCopyAnnotationTemplateRequest) (*CopyAnnotationTemplate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CopyAnnotationTemplate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationTemplateApiService.CopyAnnotationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/annotation-templates/{annotationTemplateId}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"annotationTemplateId"+"}", url.PathEscape(parameterValueToString(r.annotationTemplateId, "annotationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAnnotationTemplateRequest struct {
	ctx context.Context
	ApiService *AnnotationTemplateApiService
	createAnnotationTemplateRequest *CreateAnnotationTemplateRequest
}

// Create an new annotation template
func (r ApiCreateAnnotationTemplateRequest) CreateAnnotationTemplateRequest(createAnnotationTemplateRequest CreateAnnotationTemplateRequest) ApiCreateAnnotationTemplateRequest {
	r.createAnnotationTemplateRequest = &createAnnotationTemplateRequest
	return r
}

func (r ApiCreateAnnotationTemplateRequest) Execute() (*CreateAnnoTemplateSuccessResp, *http.Response, error) {
	return r.ApiService.CreateAnnotationTemplateExecute(r)
}

/*
CreateAnnotationTemplate Create an annotation template

Create an annotation template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAnnotationTemplateRequest
*/
func (a *AnnotationTemplateApiService) CreateAnnotationTemplate(ctx context.Context) ApiCreateAnnotationTemplateRequest {
	return ApiCreateAnnotationTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateAnnoTemplateSuccessResp
func (a *AnnotationTemplateApiService) CreateAnnotationTemplateExecute(r ApiCreateAnnotationTemplateRequest) (*CreateAnnoTemplateSuccessResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAnnoTemplateSuccessResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationTemplateApiService.CreateAnnotationTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/annotation-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createAnnotationTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("createAnnotationTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createAnnotationTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAnnotationTemplateRequest struct {
	ctx context.Context
	ApiService *AnnotationTemplateApiService
	annotationTemplateId string
}

func (r ApiDeleteAnnotationTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAnnotationTemplateExecute(r)
}

/*
DeleteAnnotationTemplate Delete an annotation template

Delete an annotation template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param annotationTemplateId The id of an annotation template
 @return ApiDeleteAnnotationTemplateRequest
*/
func (a *AnnotationTemplateApiService) DeleteAnnotationTemplate(ctx context.Context, annotationTemplateId string) ApiDeleteAnnotationTemplateRequest {
	return ApiDeleteAnnotationTemplateRequest{
		ApiService: a,
		ctx: ctx,
		annotationTemplateId: annotationTemplateId,
	}
}

// Execute executes the request
func (a *AnnotationTemplateApiService) DeleteAnnotationTemplateExecute(r ApiDeleteAnnotationTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationTemplateApiService.DeleteAnnotationTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/annotation-templates/{annotationTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"annotationTemplateId"+"}", url.PathEscape(parameterValueToString(r.annotationTemplateId, "annotationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAnnoTemplateDetailsRequest struct {
	ctx context.Context
	ApiService *AnnotationTemplateApiService
	annotationTemplateId string
}

func (r ApiGetAnnoTemplateDetailsRequest) Execute() (*AnnotationTemplateDetails, *http.Response, error) {
	return r.ApiService.GetAnnoTemplateDetailsExecute(r)
}

/*
GetAnnoTemplateDetails Get annotation template details

Get annotation template details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param annotationTemplateId The id of an annotation template
 @return ApiGetAnnoTemplateDetailsRequest
*/
func (a *AnnotationTemplateApiService) GetAnnoTemplateDetails(ctx context.Context, annotationTemplateId string) ApiGetAnnoTemplateDetailsRequest {
	return ApiGetAnnoTemplateDetailsRequest{
		ApiService: a,
		ctx: ctx,
		annotationTemplateId: annotationTemplateId,
	}
}

// Execute executes the request
//  @return AnnotationTemplateDetails
func (a *AnnotationTemplateApiService) GetAnnoTemplateDetailsExecute(r ApiGetAnnoTemplateDetailsRequest) (*AnnotationTemplateDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnnotationTemplateDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationTemplateApiService.GetAnnoTemplateDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/annotation-templates/{annotationTemplateId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"annotationTemplateId"+"}", url.PathEscape(parameterValueToString(r.annotationTemplateId, "annotationTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnnoTemplateListRequest struct {
	ctx context.Context
	ApiService *AnnotationTemplateApiService
	offset *int32
	limit *int32
	annotationTemplateIdList *string
}

// The number of items to skip before starting to collect the result set
func (r ApiGetAnnoTemplateListRequest) Offset(offset int32) ApiGetAnnoTemplateListRequest {
	r.offset = &offset
	return r
}

// The numbers of items to return
func (r ApiGetAnnoTemplateListRequest) Limit(limit int32) ApiGetAnnoTemplateListRequest {
	r.limit = &limit
	return r
}

// annotation template with id in annotation template id list will be got
func (r ApiGetAnnoTemplateListRequest) AnnotationTemplateIdList(annotationTemplateIdList string) ApiGetAnnoTemplateListRequest {
	r.annotationTemplateIdList = &annotationTemplateIdList
	return r
}

func (r ApiGetAnnoTemplateListRequest) Execute() ([]AnnotationTemplateListItem, *http.Response, error) {
	return r.ApiService.GetAnnoTemplateListExecute(r)
}

/*
GetAnnoTemplateList Get annotation template list

Get annotation template list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAnnoTemplateListRequest
*/
func (a *AnnotationTemplateApiService) GetAnnoTemplateList(ctx context.Context) ApiGetAnnoTemplateListRequest {
	return ApiGetAnnoTemplateListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AnnotationTemplateListItem
func (a *AnnotationTemplateApiService) GetAnnoTemplateListExecute(r ApiGetAnnoTemplateListRequest) ([]AnnotationTemplateListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AnnotationTemplateListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationTemplateApiService.GetAnnoTemplateList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/annotation-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.annotationTemplateIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "annotationTemplateIdList", r.annotationTemplateIdList, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAnnotationTemplateRequest struct {
	ctx context.Context
	ApiService *AnnotationTemplateApiService
	updateAnnotationTemplateRequest *UpdateAnnotationTemplateRequest
}

// Update an existed annotation template
func (r ApiUpdateAnnotationTemplateRequest) UpdateAnnotationTemplateRequest(updateAnnotationTemplateRequest UpdateAnnotationTemplateRequest) ApiUpdateAnnotationTemplateRequest {
	r.updateAnnotationTemplateRequest = &updateAnnotationTemplateRequest
	return r
}

func (r ApiUpdateAnnotationTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAnnotationTemplateExecute(r)
}

/*
UpdateAnnotationTemplate Update an annotation template

Update an annotation template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateAnnotationTemplateRequest
*/
func (a *AnnotationTemplateApiService) UpdateAnnotationTemplate(ctx context.Context) ApiUpdateAnnotationTemplateRequest {
	return ApiUpdateAnnotationTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AnnotationTemplateApiService) UpdateAnnotationTemplateExecute(r ApiUpdateAnnotationTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnnotationTemplateApiService.UpdateAnnotationTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/annotation-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateAnnotationTemplateRequest == nil {
		return nil, reportError("updateAnnotationTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateAnnotationTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
