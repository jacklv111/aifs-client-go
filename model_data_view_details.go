/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the DataViewDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataViewDetails{}

// DataViewDetails struct for DataViewDetails
type DataViewDetails struct {
	// the id of the data view
	Id *string `json:"id,omitempty"`
	// the name of the data view
	Name *string `json:"name,omitempty"`
	ViewType *DataViewType `json:"viewType,omitempty"`
	// the description of the data view
	Description *string `json:"description,omitempty"`
	RawDataType *RawDataType `json:"rawDataType,omitempty"`
	// if data view is an annotation view, it has annotation template type
	AnnotationTemplateType *string `json:"annotationTemplateType,omitempty"`
	// Unix timestamp in ms
	CreateAt *int64 `json:"createAt,omitempty"`
	Progress *float32 `json:"progress,omitempty"`
	CommitId *string `json:"commitId,omitempty"`
	Status *string `json:"status,omitempty"`
	ZipFormat *ZipFormat `json:"zipFormat,omitempty"`
	TrainRawDataViewId *string `json:"trainRawDataViewId,omitempty"`
	TrainAnnotationViewId *string `json:"trainAnnotationViewId,omitempty"`
	ValRawDataViewId *string `json:"valRawDataViewId,omitempty"`
	ValAnnotationViewId *string `json:"valAnnotationViewId,omitempty"`
	AnnotationTemplateId *string `json:"annotationTemplateId,omitempty"`
	RawDataViewId *string `json:"rawDataViewId,omitempty"`
	AnnotationViewId *string `json:"annotationViewId,omitempty"`
}

// NewDataViewDetails instantiates a new DataViewDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataViewDetails() *DataViewDetails {
	this := DataViewDetails{}
	return &this
}

// NewDataViewDetailsWithDefaults instantiates a new DataViewDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataViewDetailsWithDefaults() *DataViewDetails {
	this := DataViewDetails{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataViewDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataViewDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataViewDetails) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataViewDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataViewDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataViewDetails) SetName(v string) {
	o.Name = &v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *DataViewDetails) GetViewType() DataViewType {
	if o == nil || IsNil(o.ViewType) {
		var ret DataViewType
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetViewTypeOk() (*DataViewType, bool) {
	if o == nil || IsNil(o.ViewType) {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *DataViewDetails) HasViewType() bool {
	if o != nil && !IsNil(o.ViewType) {
		return true
	}

	return false
}

// SetViewType gets a reference to the given DataViewType and assigns it to the ViewType field.
func (o *DataViewDetails) SetViewType(v DataViewType) {
	o.ViewType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataViewDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataViewDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataViewDetails) SetDescription(v string) {
	o.Description = &v
}

// GetRawDataType returns the RawDataType field value if set, zero value otherwise.
func (o *DataViewDetails) GetRawDataType() RawDataType {
	if o == nil || IsNil(o.RawDataType) {
		var ret RawDataType
		return ret
	}
	return *o.RawDataType
}

// GetRawDataTypeOk returns a tuple with the RawDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetRawDataTypeOk() (*RawDataType, bool) {
	if o == nil || IsNil(o.RawDataType) {
		return nil, false
	}
	return o.RawDataType, true
}

// HasRawDataType returns a boolean if a field has been set.
func (o *DataViewDetails) HasRawDataType() bool {
	if o != nil && !IsNil(o.RawDataType) {
		return true
	}

	return false
}

// SetRawDataType gets a reference to the given RawDataType and assigns it to the RawDataType field.
func (o *DataViewDetails) SetRawDataType(v RawDataType) {
	o.RawDataType = &v
}

// GetAnnotationTemplateType returns the AnnotationTemplateType field value if set, zero value otherwise.
func (o *DataViewDetails) GetAnnotationTemplateType() string {
	if o == nil || IsNil(o.AnnotationTemplateType) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateType
}

// GetAnnotationTemplateTypeOk returns a tuple with the AnnotationTemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetAnnotationTemplateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateType) {
		return nil, false
	}
	return o.AnnotationTemplateType, true
}

// HasAnnotationTemplateType returns a boolean if a field has been set.
func (o *DataViewDetails) HasAnnotationTemplateType() bool {
	if o != nil && !IsNil(o.AnnotationTemplateType) {
		return true
	}

	return false
}

// SetAnnotationTemplateType gets a reference to the given string and assigns it to the AnnotationTemplateType field.
func (o *DataViewDetails) SetAnnotationTemplateType(v string) {
	o.AnnotationTemplateType = &v
}

// GetCreateAt returns the CreateAt field value if set, zero value otherwise.
func (o *DataViewDetails) GetCreateAt() int64 {
	if o == nil || IsNil(o.CreateAt) {
		var ret int64
		return ret
	}
	return *o.CreateAt
}

// GetCreateAtOk returns a tuple with the CreateAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetCreateAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreateAt) {
		return nil, false
	}
	return o.CreateAt, true
}

// HasCreateAt returns a boolean if a field has been set.
func (o *DataViewDetails) HasCreateAt() bool {
	if o != nil && !IsNil(o.CreateAt) {
		return true
	}

	return false
}

// SetCreateAt gets a reference to the given int64 and assigns it to the CreateAt field.
func (o *DataViewDetails) SetCreateAt(v int64) {
	o.CreateAt = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *DataViewDetails) GetProgress() float32 {
	if o == nil || IsNil(o.Progress) {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DataViewDetails) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *DataViewDetails) SetProgress(v float32) {
	o.Progress = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *DataViewDetails) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *DataViewDetails) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *DataViewDetails) SetCommitId(v string) {
	o.CommitId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataViewDetails) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataViewDetails) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DataViewDetails) SetStatus(v string) {
	o.Status = &v
}

// GetZipFormat returns the ZipFormat field value if set, zero value otherwise.
func (o *DataViewDetails) GetZipFormat() ZipFormat {
	if o == nil || IsNil(o.ZipFormat) {
		var ret ZipFormat
		return ret
	}
	return *o.ZipFormat
}

// GetZipFormatOk returns a tuple with the ZipFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetZipFormatOk() (*ZipFormat, bool) {
	if o == nil || IsNil(o.ZipFormat) {
		return nil, false
	}
	return o.ZipFormat, true
}

// HasZipFormat returns a boolean if a field has been set.
func (o *DataViewDetails) HasZipFormat() bool {
	if o != nil && !IsNil(o.ZipFormat) {
		return true
	}

	return false
}

// SetZipFormat gets a reference to the given ZipFormat and assigns it to the ZipFormat field.
func (o *DataViewDetails) SetZipFormat(v ZipFormat) {
	o.ZipFormat = &v
}

// GetTrainRawDataViewId returns the TrainRawDataViewId field value if set, zero value otherwise.
func (o *DataViewDetails) GetTrainRawDataViewId() string {
	if o == nil || IsNil(o.TrainRawDataViewId) {
		var ret string
		return ret
	}
	return *o.TrainRawDataViewId
}

// GetTrainRawDataViewIdOk returns a tuple with the TrainRawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetTrainRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.TrainRawDataViewId) {
		return nil, false
	}
	return o.TrainRawDataViewId, true
}

// HasTrainRawDataViewId returns a boolean if a field has been set.
func (o *DataViewDetails) HasTrainRawDataViewId() bool {
	if o != nil && !IsNil(o.TrainRawDataViewId) {
		return true
	}

	return false
}

// SetTrainRawDataViewId gets a reference to the given string and assigns it to the TrainRawDataViewId field.
func (o *DataViewDetails) SetTrainRawDataViewId(v string) {
	o.TrainRawDataViewId = &v
}

// GetTrainAnnotationViewId returns the TrainAnnotationViewId field value if set, zero value otherwise.
func (o *DataViewDetails) GetTrainAnnotationViewId() string {
	if o == nil || IsNil(o.TrainAnnotationViewId) {
		var ret string
		return ret
	}
	return *o.TrainAnnotationViewId
}

// GetTrainAnnotationViewIdOk returns a tuple with the TrainAnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetTrainAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.TrainAnnotationViewId) {
		return nil, false
	}
	return o.TrainAnnotationViewId, true
}

// HasTrainAnnotationViewId returns a boolean if a field has been set.
func (o *DataViewDetails) HasTrainAnnotationViewId() bool {
	if o != nil && !IsNil(o.TrainAnnotationViewId) {
		return true
	}

	return false
}

// SetTrainAnnotationViewId gets a reference to the given string and assigns it to the TrainAnnotationViewId field.
func (o *DataViewDetails) SetTrainAnnotationViewId(v string) {
	o.TrainAnnotationViewId = &v
}

// GetValRawDataViewId returns the ValRawDataViewId field value if set, zero value otherwise.
func (o *DataViewDetails) GetValRawDataViewId() string {
	if o == nil || IsNil(o.ValRawDataViewId) {
		var ret string
		return ret
	}
	return *o.ValRawDataViewId
}

// GetValRawDataViewIdOk returns a tuple with the ValRawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetValRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValRawDataViewId) {
		return nil, false
	}
	return o.ValRawDataViewId, true
}

// HasValRawDataViewId returns a boolean if a field has been set.
func (o *DataViewDetails) HasValRawDataViewId() bool {
	if o != nil && !IsNil(o.ValRawDataViewId) {
		return true
	}

	return false
}

// SetValRawDataViewId gets a reference to the given string and assigns it to the ValRawDataViewId field.
func (o *DataViewDetails) SetValRawDataViewId(v string) {
	o.ValRawDataViewId = &v
}

// GetValAnnotationViewId returns the ValAnnotationViewId field value if set, zero value otherwise.
func (o *DataViewDetails) GetValAnnotationViewId() string {
	if o == nil || IsNil(o.ValAnnotationViewId) {
		var ret string
		return ret
	}
	return *o.ValAnnotationViewId
}

// GetValAnnotationViewIdOk returns a tuple with the ValAnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetValAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValAnnotationViewId) {
		return nil, false
	}
	return o.ValAnnotationViewId, true
}

// HasValAnnotationViewId returns a boolean if a field has been set.
func (o *DataViewDetails) HasValAnnotationViewId() bool {
	if o != nil && !IsNil(o.ValAnnotationViewId) {
		return true
	}

	return false
}

// SetValAnnotationViewId gets a reference to the given string and assigns it to the ValAnnotationViewId field.
func (o *DataViewDetails) SetValAnnotationViewId(v string) {
	o.ValAnnotationViewId = &v
}

// GetAnnotationTemplateId returns the AnnotationTemplateId field value if set, zero value otherwise.
func (o *DataViewDetails) GetAnnotationTemplateId() string {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateId
}

// GetAnnotationTemplateIdOk returns a tuple with the AnnotationTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetAnnotationTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		return nil, false
	}
	return o.AnnotationTemplateId, true
}

// HasAnnotationTemplateId returns a boolean if a field has been set.
func (o *DataViewDetails) HasAnnotationTemplateId() bool {
	if o != nil && !IsNil(o.AnnotationTemplateId) {
		return true
	}

	return false
}

// SetAnnotationTemplateId gets a reference to the given string and assigns it to the AnnotationTemplateId field.
func (o *DataViewDetails) SetAnnotationTemplateId(v string) {
	o.AnnotationTemplateId = &v
}

// GetRawDataViewId returns the RawDataViewId field value if set, zero value otherwise.
func (o *DataViewDetails) GetRawDataViewId() string {
	if o == nil || IsNil(o.RawDataViewId) {
		var ret string
		return ret
	}
	return *o.RawDataViewId
}

// GetRawDataViewIdOk returns a tuple with the RawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.RawDataViewId) {
		return nil, false
	}
	return o.RawDataViewId, true
}

// HasRawDataViewId returns a boolean if a field has been set.
func (o *DataViewDetails) HasRawDataViewId() bool {
	if o != nil && !IsNil(o.RawDataViewId) {
		return true
	}

	return false
}

// SetRawDataViewId gets a reference to the given string and assigns it to the RawDataViewId field.
func (o *DataViewDetails) SetRawDataViewId(v string) {
	o.RawDataViewId = &v
}

// GetAnnotationViewId returns the AnnotationViewId field value if set, zero value otherwise.
func (o *DataViewDetails) GetAnnotationViewId() string {
	if o == nil || IsNil(o.AnnotationViewId) {
		var ret string
		return ret
	}
	return *o.AnnotationViewId
}

// GetAnnotationViewIdOk returns a tuple with the AnnotationViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewDetails) GetAnnotationViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationViewId) {
		return nil, false
	}
	return o.AnnotationViewId, true
}

// HasAnnotationViewId returns a boolean if a field has been set.
func (o *DataViewDetails) HasAnnotationViewId() bool {
	if o != nil && !IsNil(o.AnnotationViewId) {
		return true
	}

	return false
}

// SetAnnotationViewId gets a reference to the given string and assigns it to the AnnotationViewId field.
func (o *DataViewDetails) SetAnnotationViewId(v string) {
	o.AnnotationViewId = &v
}

func (o DataViewDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataViewDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ViewType) {
		toSerialize["viewType"] = o.ViewType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RawDataType) {
		toSerialize["rawDataType"] = o.RawDataType
	}
	if !IsNil(o.AnnotationTemplateType) {
		toSerialize["annotationTemplateType"] = o.AnnotationTemplateType
	}
	if !IsNil(o.CreateAt) {
		toSerialize["createAt"] = o.CreateAt
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.CommitId) {
		toSerialize["commitId"] = o.CommitId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ZipFormat) {
		toSerialize["zipFormat"] = o.ZipFormat
	}
	if !IsNil(o.TrainRawDataViewId) {
		toSerialize["trainRawDataViewId"] = o.TrainRawDataViewId
	}
	if !IsNil(o.TrainAnnotationViewId) {
		toSerialize["trainAnnotationViewId"] = o.TrainAnnotationViewId
	}
	if !IsNil(o.ValRawDataViewId) {
		toSerialize["valRawDataViewId"] = o.ValRawDataViewId
	}
	if !IsNil(o.ValAnnotationViewId) {
		toSerialize["valAnnotationViewId"] = o.ValAnnotationViewId
	}
	if !IsNil(o.AnnotationTemplateId) {
		toSerialize["annotationTemplateId"] = o.AnnotationTemplateId
	}
	if !IsNil(o.RawDataViewId) {
		toSerialize["rawDataViewId"] = o.RawDataViewId
	}
	if !IsNil(o.AnnotationViewId) {
		toSerialize["annotationViewId"] = o.AnnotationViewId
	}
	return toSerialize, nil
}

type NullableDataViewDetails struct {
	value *DataViewDetails
	isSet bool
}

func (v NullableDataViewDetails) Get() *DataViewDetails {
	return v.value
}

func (v *NullableDataViewDetails) Set(val *DataViewDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDataViewDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDataViewDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataViewDetails(val *DataViewDetails) *NullableDataViewDetails {
	return &NullableDataViewDetails{value: val, isSet: true}
}

func (v NullableDataViewDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataViewDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


