/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UploadAnnotationFormat the format of the data
type UploadAnnotationFormat string

// List of UploadAnnotationFormat
const (
	ALL_ANNOTATION_SINGLE_FILE_LOCAL UploadAnnotationFormat = "all-annotation-single-file-local"
	PER_ANNOTATION_PER_FILE_LOCAL UploadAnnotationFormat = "per-annotation-per-file-local"
)

// All allowed values of UploadAnnotationFormat enum
var AllowedUploadAnnotationFormatEnumValues = []UploadAnnotationFormat{
	"all-annotation-single-file-local",
	"per-annotation-per-file-local",
}

func (v *UploadAnnotationFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UploadAnnotationFormat(value)
	for _, existing := range AllowedUploadAnnotationFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UploadAnnotationFormat", value)
}

// NewUploadAnnotationFormatFromValue returns a pointer to a valid UploadAnnotationFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUploadAnnotationFormatFromValue(v string) (*UploadAnnotationFormat, error) {
	ev := UploadAnnotationFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UploadAnnotationFormat: valid values are %v", v, AllowedUploadAnnotationFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UploadAnnotationFormat) IsValid() bool {
	for _, existing := range AllowedUploadAnnotationFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UploadAnnotationFormat value
func (v UploadAnnotationFormat) Ptr() *UploadAnnotationFormat {
	return &v
}

type NullableUploadAnnotationFormat struct {
	value *UploadAnnotationFormat
	isSet bool
}

func (v NullableUploadAnnotationFormat) Get() *UploadAnnotationFormat {
	return v.value
}

func (v *NullableUploadAnnotationFormat) Set(val *UploadAnnotationFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadAnnotationFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadAnnotationFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadAnnotationFormat(val *UploadAnnotationFormat) *NullableUploadAnnotationFormat {
	return &NullableUploadAnnotationFormat{value: val, isSet: true}
}

func (v NullableUploadAnnotationFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadAnnotationFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

