/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the GetAnnotationsInDataView200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAnnotationsInDataView200Response{}

// GetAnnotationsInDataView200Response struct for GetAnnotationsInDataView200Response
type GetAnnotationsInDataView200Response struct {
	AnnotationTemplateId *string `json:"annotationTemplateId,omitempty"`
	AnnotationTemplateType *string `json:"annotationTemplateType,omitempty"`
	AnnotationList []AnnotationListItem `json:"annotationList,omitempty"`
}

// NewGetAnnotationsInDataView200Response instantiates a new GetAnnotationsInDataView200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAnnotationsInDataView200Response() *GetAnnotationsInDataView200Response {
	this := GetAnnotationsInDataView200Response{}
	return &this
}

// NewGetAnnotationsInDataView200ResponseWithDefaults instantiates a new GetAnnotationsInDataView200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAnnotationsInDataView200ResponseWithDefaults() *GetAnnotationsInDataView200Response {
	this := GetAnnotationsInDataView200Response{}
	return &this
}

// GetAnnotationTemplateId returns the AnnotationTemplateId field value if set, zero value otherwise.
func (o *GetAnnotationsInDataView200Response) GetAnnotationTemplateId() string {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateId
}

// GetAnnotationTemplateIdOk returns a tuple with the AnnotationTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAnnotationsInDataView200Response) GetAnnotationTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		return nil, false
	}
	return o.AnnotationTemplateId, true
}

// HasAnnotationTemplateId returns a boolean if a field has been set.
func (o *GetAnnotationsInDataView200Response) HasAnnotationTemplateId() bool {
	if o != nil && !IsNil(o.AnnotationTemplateId) {
		return true
	}

	return false
}

// SetAnnotationTemplateId gets a reference to the given string and assigns it to the AnnotationTemplateId field.
func (o *GetAnnotationsInDataView200Response) SetAnnotationTemplateId(v string) {
	o.AnnotationTemplateId = &v
}

// GetAnnotationTemplateType returns the AnnotationTemplateType field value if set, zero value otherwise.
func (o *GetAnnotationsInDataView200Response) GetAnnotationTemplateType() string {
	if o == nil || IsNil(o.AnnotationTemplateType) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateType
}

// GetAnnotationTemplateTypeOk returns a tuple with the AnnotationTemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAnnotationsInDataView200Response) GetAnnotationTemplateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateType) {
		return nil, false
	}
	return o.AnnotationTemplateType, true
}

// HasAnnotationTemplateType returns a boolean if a field has been set.
func (o *GetAnnotationsInDataView200Response) HasAnnotationTemplateType() bool {
	if o != nil && !IsNil(o.AnnotationTemplateType) {
		return true
	}

	return false
}

// SetAnnotationTemplateType gets a reference to the given string and assigns it to the AnnotationTemplateType field.
func (o *GetAnnotationsInDataView200Response) SetAnnotationTemplateType(v string) {
	o.AnnotationTemplateType = &v
}

// GetAnnotationList returns the AnnotationList field value if set, zero value otherwise.
func (o *GetAnnotationsInDataView200Response) GetAnnotationList() []AnnotationListItem {
	if o == nil || IsNil(o.AnnotationList) {
		var ret []AnnotationListItem
		return ret
	}
	return o.AnnotationList
}

// GetAnnotationListOk returns a tuple with the AnnotationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAnnotationsInDataView200Response) GetAnnotationListOk() ([]AnnotationListItem, bool) {
	if o == nil || IsNil(o.AnnotationList) {
		return nil, false
	}
	return o.AnnotationList, true
}

// HasAnnotationList returns a boolean if a field has been set.
func (o *GetAnnotationsInDataView200Response) HasAnnotationList() bool {
	if o != nil && !IsNil(o.AnnotationList) {
		return true
	}

	return false
}

// SetAnnotationList gets a reference to the given []AnnotationListItem and assigns it to the AnnotationList field.
func (o *GetAnnotationsInDataView200Response) SetAnnotationList(v []AnnotationListItem) {
	o.AnnotationList = v
}

func (o GetAnnotationsInDataView200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAnnotationsInDataView200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnnotationTemplateId) {
		toSerialize["annotationTemplateId"] = o.AnnotationTemplateId
	}
	if !IsNil(o.AnnotationTemplateType) {
		toSerialize["annotationTemplateType"] = o.AnnotationTemplateType
	}
	if !IsNil(o.AnnotationList) {
		toSerialize["annotationList"] = o.AnnotationList
	}
	return toSerialize, nil
}

type NullableGetAnnotationsInDataView200Response struct {
	value *GetAnnotationsInDataView200Response
	isSet bool
}

func (v NullableGetAnnotationsInDataView200Response) Get() *GetAnnotationsInDataView200Response {
	return v.value
}

func (v *NullableGetAnnotationsInDataView200Response) Set(val *GetAnnotationsInDataView200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAnnotationsInDataView200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAnnotationsInDataView200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAnnotationsInDataView200Response(val *GetAnnotationsInDataView200Response) *NullableGetAnnotationsInDataView200Response {
	return &NullableGetAnnotationsInDataView200Response{value: val, isSet: true}
}

func (v NullableGetAnnotationsInDataView200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAnnotationsInDataView200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


