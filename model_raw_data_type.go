/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RawDataType the type of raw data
type RawDataType string

// List of RawDataType
const (
	IMAGE RawDataType = "image"
	TEXT RawDataType = "text"
	RGBD RawDataType = "rgbd"
	POINTS_3D RawDataType = "points-3d"
)

// All allowed values of RawDataType enum
var AllowedRawDataTypeEnumValues = []RawDataType{
	"image",
	"text",
	"rgbd",
	"points-3d",
}

func (v *RawDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RawDataType(value)
	for _, existing := range AllowedRawDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RawDataType", value)
}

// NewRawDataTypeFromValue returns a pointer to a valid RawDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRawDataTypeFromValue(v string) (*RawDataType, error) {
	ev := RawDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RawDataType: valid values are %v", v, AllowedRawDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RawDataType) IsValid() bool {
	for _, existing := range AllowedRawDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RawDataType value
func (v RawDataType) Ptr() *RawDataType {
	return &v
}

type NullableRawDataType struct {
	value *RawDataType
	isSet bool
}

func (v NullableRawDataType) Get() *RawDataType {
	return v.value
}

func (v *NullableRawDataType) Set(val *RawDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableRawDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableRawDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawDataType(val *RawDataType) *NullableRawDataType {
	return &NullableRawDataType{value: val, isSet: true}
}

func (v NullableRawDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

