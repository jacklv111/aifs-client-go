/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterAnnotationsInDataViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterAnnotationsInDataViewRequest{}

// FilterAnnotationsInDataViewRequest struct for FilterAnnotationsInDataViewRequest
type FilterAnnotationsInDataViewRequest struct {
	// the id of the raw data view
	RawDataViewId *string `json:"rawDataViewId,omitempty"`
}

// NewFilterAnnotationsInDataViewRequest instantiates a new FilterAnnotationsInDataViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterAnnotationsInDataViewRequest() *FilterAnnotationsInDataViewRequest {
	this := FilterAnnotationsInDataViewRequest{}
	return &this
}

// NewFilterAnnotationsInDataViewRequestWithDefaults instantiates a new FilterAnnotationsInDataViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterAnnotationsInDataViewRequestWithDefaults() *FilterAnnotationsInDataViewRequest {
	this := FilterAnnotationsInDataViewRequest{}
	return &this
}

// GetRawDataViewId returns the RawDataViewId field value if set, zero value otherwise.
func (o *FilterAnnotationsInDataViewRequest) GetRawDataViewId() string {
	if o == nil || IsNil(o.RawDataViewId) {
		var ret string
		return ret
	}
	return *o.RawDataViewId
}

// GetRawDataViewIdOk returns a tuple with the RawDataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterAnnotationsInDataViewRequest) GetRawDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.RawDataViewId) {
		return nil, false
	}
	return o.RawDataViewId, true
}

// HasRawDataViewId returns a boolean if a field has been set.
func (o *FilterAnnotationsInDataViewRequest) HasRawDataViewId() bool {
	if o != nil && !IsNil(o.RawDataViewId) {
		return true
	}

	return false
}

// SetRawDataViewId gets a reference to the given string and assigns it to the RawDataViewId field.
func (o *FilterAnnotationsInDataViewRequest) SetRawDataViewId(v string) {
	o.RawDataViewId = &v
}

func (o FilterAnnotationsInDataViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterAnnotationsInDataViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RawDataViewId) {
		toSerialize["rawDataViewId"] = o.RawDataViewId
	}
	return toSerialize, nil
}

type NullableFilterAnnotationsInDataViewRequest struct {
	value *FilterAnnotationsInDataViewRequest
	isSet bool
}

func (v NullableFilterAnnotationsInDataViewRequest) Get() *FilterAnnotationsInDataViewRequest {
	return v.value
}

func (v *NullableFilterAnnotationsInDataViewRequest) Set(val *FilterAnnotationsInDataViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterAnnotationsInDataViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterAnnotationsInDataViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterAnnotationsInDataViewRequest(val *FilterAnnotationsInDataViewRequest) *NullableFilterAnnotationsInDataViewRequest {
	return &NullableFilterAnnotationsInDataViewRequest{value: val, isSet: true}
}

func (v NullableFilterAnnotationsInDataViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterAnnotationsInDataViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


