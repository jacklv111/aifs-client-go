/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the LabelDistribution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelDistribution{}

// LabelDistribution struct for LabelDistribution
type LabelDistribution struct {
	// the label id
	LabelId *string `json:"labelId,omitempty"`
	// the number of the label in the data view.
	Count *int32 `json:"count,omitempty"`
	// the ratio of the label in the data view.
	Ratio *float32 `json:"ratio,omitempty"`
}

// NewLabelDistribution instantiates a new LabelDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelDistribution() *LabelDistribution {
	this := LabelDistribution{}
	return &this
}

// NewLabelDistributionWithDefaults instantiates a new LabelDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelDistributionWithDefaults() *LabelDistribution {
	this := LabelDistribution{}
	return &this
}

// GetLabelId returns the LabelId field value if set, zero value otherwise.
func (o *LabelDistribution) GetLabelId() string {
	if o == nil || IsNil(o.LabelId) {
		var ret string
		return ret
	}
	return *o.LabelId
}

// GetLabelIdOk returns a tuple with the LabelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelDistribution) GetLabelIdOk() (*string, bool) {
	if o == nil || IsNil(o.LabelId) {
		return nil, false
	}
	return o.LabelId, true
}

// HasLabelId returns a boolean if a field has been set.
func (o *LabelDistribution) HasLabelId() bool {
	if o != nil && !IsNil(o.LabelId) {
		return true
	}

	return false
}

// SetLabelId gets a reference to the given string and assigns it to the LabelId field.
func (o *LabelDistribution) SetLabelId(v string) {
	o.LabelId = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *LabelDistribution) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelDistribution) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *LabelDistribution) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *LabelDistribution) SetCount(v int32) {
	o.Count = &v
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *LabelDistribution) GetRatio() float32 {
	if o == nil || IsNil(o.Ratio) {
		var ret float32
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelDistribution) GetRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.Ratio) {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *LabelDistribution) HasRatio() bool {
	if o != nil && !IsNil(o.Ratio) {
		return true
	}

	return false
}

// SetRatio gets a reference to the given float32 and assigns it to the Ratio field.
func (o *LabelDistribution) SetRatio(v float32) {
	o.Ratio = &v
}

func (o LabelDistribution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelDistribution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelId) {
		toSerialize["labelId"] = o.LabelId
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Ratio) {
		toSerialize["ratio"] = o.Ratio
	}
	return toSerialize, nil
}

type NullableLabelDistribution struct {
	value *LabelDistribution
	isSet bool
}

func (v NullableLabelDistribution) Get() *LabelDistribution {
	return v.value
}

func (v *NullableLabelDistribution) Set(val *LabelDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelDistribution(val *LabelDistribution) *NullableLabelDistribution {
	return &NullableLabelDistribution{value: val, isSet: true}
}

func (v NullableLabelDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


