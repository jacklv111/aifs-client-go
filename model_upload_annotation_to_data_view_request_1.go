/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UploadAnnotationToDataViewRequest1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadAnnotationToDataViewRequest1{}

// UploadAnnotationToDataViewRequest1 struct for UploadAnnotationToDataViewRequest1
type UploadAnnotationToDataViewRequest1 struct {
	// the folder path of the resource
	ResourcePath *string `json:"resourcePath,omitempty"`
	AnnotationTemplateId *string `json:"annotationTemplateId,omitempty"`
	Format *UploadAnnotationFormat `json:"format,omitempty"`
}

// NewUploadAnnotationToDataViewRequest1 instantiates a new UploadAnnotationToDataViewRequest1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadAnnotationToDataViewRequest1() *UploadAnnotationToDataViewRequest1 {
	this := UploadAnnotationToDataViewRequest1{}
	return &this
}

// NewUploadAnnotationToDataViewRequest1WithDefaults instantiates a new UploadAnnotationToDataViewRequest1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadAnnotationToDataViewRequest1WithDefaults() *UploadAnnotationToDataViewRequest1 {
	this := UploadAnnotationToDataViewRequest1{}
	return &this
}

// GetResourcePath returns the ResourcePath field value if set, zero value otherwise.
func (o *UploadAnnotationToDataViewRequest1) GetResourcePath() string {
	if o == nil || IsNil(o.ResourcePath) {
		var ret string
		return ret
	}
	return *o.ResourcePath
}

// GetResourcePathOk returns a tuple with the ResourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadAnnotationToDataViewRequest1) GetResourcePathOk() (*string, bool) {
	if o == nil || IsNil(o.ResourcePath) {
		return nil, false
	}
	return o.ResourcePath, true
}

// HasResourcePath returns a boolean if a field has been set.
func (o *UploadAnnotationToDataViewRequest1) HasResourcePath() bool {
	if o != nil && !IsNil(o.ResourcePath) {
		return true
	}

	return false
}

// SetResourcePath gets a reference to the given string and assigns it to the ResourcePath field.
func (o *UploadAnnotationToDataViewRequest1) SetResourcePath(v string) {
	o.ResourcePath = &v
}

// GetAnnotationTemplateId returns the AnnotationTemplateId field value if set, zero value otherwise.
func (o *UploadAnnotationToDataViewRequest1) GetAnnotationTemplateId() string {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateId
}

// GetAnnotationTemplateIdOk returns a tuple with the AnnotationTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadAnnotationToDataViewRequest1) GetAnnotationTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		return nil, false
	}
	return o.AnnotationTemplateId, true
}

// HasAnnotationTemplateId returns a boolean if a field has been set.
func (o *UploadAnnotationToDataViewRequest1) HasAnnotationTemplateId() bool {
	if o != nil && !IsNil(o.AnnotationTemplateId) {
		return true
	}

	return false
}

// SetAnnotationTemplateId gets a reference to the given string and assigns it to the AnnotationTemplateId field.
func (o *UploadAnnotationToDataViewRequest1) SetAnnotationTemplateId(v string) {
	o.AnnotationTemplateId = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *UploadAnnotationToDataViewRequest1) GetFormat() UploadAnnotationFormat {
	if o == nil || IsNil(o.Format) {
		var ret UploadAnnotationFormat
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadAnnotationToDataViewRequest1) GetFormatOk() (*UploadAnnotationFormat, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *UploadAnnotationToDataViewRequest1) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given UploadAnnotationFormat and assigns it to the Format field.
func (o *UploadAnnotationToDataViewRequest1) SetFormat(v UploadAnnotationFormat) {
	o.Format = &v
}

func (o UploadAnnotationToDataViewRequest1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadAnnotationToDataViewRequest1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourcePath) {
		toSerialize["resourcePath"] = o.ResourcePath
	}
	if !IsNil(o.AnnotationTemplateId) {
		toSerialize["annotationTemplateId"] = o.AnnotationTemplateId
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	return toSerialize, nil
}

type NullableUploadAnnotationToDataViewRequest1 struct {
	value *UploadAnnotationToDataViewRequest1
	isSet bool
}

func (v NullableUploadAnnotationToDataViewRequest1) Get() *UploadAnnotationToDataViewRequest1 {
	return v.value
}

func (v *NullableUploadAnnotationToDataViewRequest1) Set(val *UploadAnnotationToDataViewRequest1) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadAnnotationToDataViewRequest1) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadAnnotationToDataViewRequest1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadAnnotationToDataViewRequest1(val *UploadAnnotationToDataViewRequest1) *NullableUploadAnnotationToDataViewRequest1 {
	return &NullableUploadAnnotationToDataViewRequest1{value: val, isSet: true}
}

func (v NullableUploadAnnotationToDataViewRequest1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadAnnotationToDataViewRequest1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


