/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelDataViewLocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelDataViewLocations{}

// ModelDataViewLocations struct for ModelDataViewLocations
type ModelDataViewLocations struct {
	DataViewId *string `json:"dataViewId,omitempty"`
	ViewType *DataViewType `json:"viewType,omitempty"`
	DataItems []S3StorageInner `json:"dataItems,omitempty"`
}

// NewModelDataViewLocations instantiates a new ModelDataViewLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelDataViewLocations() *ModelDataViewLocations {
	this := ModelDataViewLocations{}
	return &this
}

// NewModelDataViewLocationsWithDefaults instantiates a new ModelDataViewLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelDataViewLocationsWithDefaults() *ModelDataViewLocations {
	this := ModelDataViewLocations{}
	return &this
}

// GetDataViewId returns the DataViewId field value if set, zero value otherwise.
func (o *ModelDataViewLocations) GetDataViewId() string {
	if o == nil || IsNil(o.DataViewId) {
		var ret string
		return ret
	}
	return *o.DataViewId
}

// GetDataViewIdOk returns a tuple with the DataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDataViewLocations) GetDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataViewId) {
		return nil, false
	}
	return o.DataViewId, true
}

// HasDataViewId returns a boolean if a field has been set.
func (o *ModelDataViewLocations) HasDataViewId() bool {
	if o != nil && !IsNil(o.DataViewId) {
		return true
	}

	return false
}

// SetDataViewId gets a reference to the given string and assigns it to the DataViewId field.
func (o *ModelDataViewLocations) SetDataViewId(v string) {
	o.DataViewId = &v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *ModelDataViewLocations) GetViewType() DataViewType {
	if o == nil || IsNil(o.ViewType) {
		var ret DataViewType
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDataViewLocations) GetViewTypeOk() (*DataViewType, bool) {
	if o == nil || IsNil(o.ViewType) {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *ModelDataViewLocations) HasViewType() bool {
	if o != nil && !IsNil(o.ViewType) {
		return true
	}

	return false
}

// SetViewType gets a reference to the given DataViewType and assigns it to the ViewType field.
func (o *ModelDataViewLocations) SetViewType(v DataViewType) {
	o.ViewType = &v
}

// GetDataItems returns the DataItems field value if set, zero value otherwise.
func (o *ModelDataViewLocations) GetDataItems() []S3StorageInner {
	if o == nil || IsNil(o.DataItems) {
		var ret []S3StorageInner
		return ret
	}
	return o.DataItems
}

// GetDataItemsOk returns a tuple with the DataItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDataViewLocations) GetDataItemsOk() ([]S3StorageInner, bool) {
	if o == nil || IsNil(o.DataItems) {
		return nil, false
	}
	return o.DataItems, true
}

// HasDataItems returns a boolean if a field has been set.
func (o *ModelDataViewLocations) HasDataItems() bool {
	if o != nil && !IsNil(o.DataItems) {
		return true
	}

	return false
}

// SetDataItems gets a reference to the given []S3StorageInner and assigns it to the DataItems field.
func (o *ModelDataViewLocations) SetDataItems(v []S3StorageInner) {
	o.DataItems = v
}

func (o ModelDataViewLocations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelDataViewLocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataViewId) {
		toSerialize["dataViewId"] = o.DataViewId
	}
	if !IsNil(o.ViewType) {
		toSerialize["viewType"] = o.ViewType
	}
	if !IsNil(o.DataItems) {
		toSerialize["dataItems"] = o.DataItems
	}
	return toSerialize, nil
}

type NullableModelDataViewLocations struct {
	value *ModelDataViewLocations
	isSet bool
}

func (v NullableModelDataViewLocations) Get() *ModelDataViewLocations {
	return v.value
}

func (v *NullableModelDataViewLocations) Set(val *ModelDataViewLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDataViewLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDataViewLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDataViewLocations(val *ModelDataViewLocations) *NullableModelDataViewLocations {
	return &NullableModelDataViewLocations{value: val, isSet: true}
}

func (v NullableModelDataViewLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDataViewLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


