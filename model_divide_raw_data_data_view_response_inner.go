/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DivideRawDataDataViewResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DivideRawDataDataViewResponseInner{}

// DivideRawDataDataViewResponseInner struct for DivideRawDataDataViewResponseInner
type DivideRawDataDataViewResponseInner struct {
	Name *string `json:"name,omitempty"`
	DataViewId *string `json:"dataViewId,omitempty"`
	ItemCount *int32 `json:"itemCount,omitempty"`
}

// NewDivideRawDataDataViewResponseInner instantiates a new DivideRawDataDataViewResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDivideRawDataDataViewResponseInner() *DivideRawDataDataViewResponseInner {
	this := DivideRawDataDataViewResponseInner{}
	return &this
}

// NewDivideRawDataDataViewResponseInnerWithDefaults instantiates a new DivideRawDataDataViewResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDivideRawDataDataViewResponseInnerWithDefaults() *DivideRawDataDataViewResponseInner {
	this := DivideRawDataDataViewResponseInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DivideRawDataDataViewResponseInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideRawDataDataViewResponseInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DivideRawDataDataViewResponseInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DivideRawDataDataViewResponseInner) SetName(v string) {
	o.Name = &v
}

// GetDataViewId returns the DataViewId field value if set, zero value otherwise.
func (o *DivideRawDataDataViewResponseInner) GetDataViewId() string {
	if o == nil || IsNil(o.DataViewId) {
		var ret string
		return ret
	}
	return *o.DataViewId
}

// GetDataViewIdOk returns a tuple with the DataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideRawDataDataViewResponseInner) GetDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataViewId) {
		return nil, false
	}
	return o.DataViewId, true
}

// HasDataViewId returns a boolean if a field has been set.
func (o *DivideRawDataDataViewResponseInner) HasDataViewId() bool {
	if o != nil && !IsNil(o.DataViewId) {
		return true
	}

	return false
}

// SetDataViewId gets a reference to the given string and assigns it to the DataViewId field.
func (o *DivideRawDataDataViewResponseInner) SetDataViewId(v string) {
	o.DataViewId = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *DivideRawDataDataViewResponseInner) GetItemCount() int32 {
	if o == nil || IsNil(o.ItemCount) {
		var ret int32
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideRawDataDataViewResponseInner) GetItemCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *DivideRawDataDataViewResponseInner) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int32 and assigns it to the ItemCount field.
func (o *DivideRawDataDataViewResponseInner) SetItemCount(v int32) {
	o.ItemCount = &v
}

func (o DivideRawDataDataViewResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DivideRawDataDataViewResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DataViewId) {
		toSerialize["dataViewId"] = o.DataViewId
	}
	if !IsNil(o.ItemCount) {
		toSerialize["itemCount"] = o.ItemCount
	}
	return toSerialize, nil
}

type NullableDivideRawDataDataViewResponseInner struct {
	value *DivideRawDataDataViewResponseInner
	isSet bool
}

func (v NullableDivideRawDataDataViewResponseInner) Get() *DivideRawDataDataViewResponseInner {
	return v.value
}

func (v *NullableDivideRawDataDataViewResponseInner) Set(val *DivideRawDataDataViewResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDivideRawDataDataViewResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDivideRawDataDataViewResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivideRawDataDataViewResponseInner(val *DivideRawDataDataViewResponseInner) *NullableDivideRawDataDataViewResponseInner {
	return &NullableDivideRawDataDataViewResponseInner{value: val, isSet: true}
}

func (v NullableDivideRawDataDataViewResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivideRawDataDataViewResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


