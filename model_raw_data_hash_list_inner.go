/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RawDataHashListInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawDataHashListInner{}

// RawDataHashListInner struct for RawDataHashListInner
type RawDataHashListInner struct {
	RawDataId *string `json:"rawDataId,omitempty"`
	Sha256 *string `json:"sha256,omitempty"`
}

// NewRawDataHashListInner instantiates a new RawDataHashListInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawDataHashListInner() *RawDataHashListInner {
	this := RawDataHashListInner{}
	return &this
}

// NewRawDataHashListInnerWithDefaults instantiates a new RawDataHashListInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawDataHashListInnerWithDefaults() *RawDataHashListInner {
	this := RawDataHashListInner{}
	return &this
}

// GetRawDataId returns the RawDataId field value if set, zero value otherwise.
func (o *RawDataHashListInner) GetRawDataId() string {
	if o == nil || IsNil(o.RawDataId) {
		var ret string
		return ret
	}
	return *o.RawDataId
}

// GetRawDataIdOk returns a tuple with the RawDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawDataHashListInner) GetRawDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.RawDataId) {
		return nil, false
	}
	return o.RawDataId, true
}

// HasRawDataId returns a boolean if a field has been set.
func (o *RawDataHashListInner) HasRawDataId() bool {
	if o != nil && !IsNil(o.RawDataId) {
		return true
	}

	return false
}

// SetRawDataId gets a reference to the given string and assigns it to the RawDataId field.
func (o *RawDataHashListInner) SetRawDataId(v string) {
	o.RawDataId = &v
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise.
func (o *RawDataHashListInner) GetSha256() string {
	if o == nil || IsNil(o.Sha256) {
		var ret string
		return ret
	}
	return *o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawDataHashListInner) GetSha256Ok() (*string, bool) {
	if o == nil || IsNil(o.Sha256) {
		return nil, false
	}
	return o.Sha256, true
}

// HasSha256 returns a boolean if a field has been set.
func (o *RawDataHashListInner) HasSha256() bool {
	if o != nil && !IsNil(o.Sha256) {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given string and assigns it to the Sha256 field.
func (o *RawDataHashListInner) SetSha256(v string) {
	o.Sha256 = &v
}

func (o RawDataHashListInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawDataHashListInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RawDataId) {
		toSerialize["rawDataId"] = o.RawDataId
	}
	if !IsNil(o.Sha256) {
		toSerialize["sha256"] = o.Sha256
	}
	return toSerialize, nil
}

type NullableRawDataHashListInner struct {
	value *RawDataHashListInner
	isSet bool
}

func (v NullableRawDataHashListInner) Get() *RawDataHashListInner {
	return v.value
}

func (v *NullableRawDataHashListInner) Set(val *RawDataHashListInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRawDataHashListInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRawDataHashListInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawDataHashListInner(val *RawDataHashListInner) *NullableRawDataHashListInner {
	return &NullableRawDataHashListInner{value: val, isSet: true}
}

func (v NullableRawDataHashListInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawDataHashListInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


