/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the GetRawDataInDataView200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRawDataInDataView200Response{}

// GetRawDataInDataView200Response struct for GetRawDataInDataView200Response
type GetRawDataInDataView200Response struct {
	RawDataType *RawDataType `json:"rawDataType,omitempty"`
	RawDataList []RawDataListItem `json:"rawDataList,omitempty"`
}

// NewGetRawDataInDataView200Response instantiates a new GetRawDataInDataView200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRawDataInDataView200Response() *GetRawDataInDataView200Response {
	this := GetRawDataInDataView200Response{}
	return &this
}

// NewGetRawDataInDataView200ResponseWithDefaults instantiates a new GetRawDataInDataView200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRawDataInDataView200ResponseWithDefaults() *GetRawDataInDataView200Response {
	this := GetRawDataInDataView200Response{}
	return &this
}

// GetRawDataType returns the RawDataType field value if set, zero value otherwise.
func (o *GetRawDataInDataView200Response) GetRawDataType() RawDataType {
	if o == nil || IsNil(o.RawDataType) {
		var ret RawDataType
		return ret
	}
	return *o.RawDataType
}

// GetRawDataTypeOk returns a tuple with the RawDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRawDataInDataView200Response) GetRawDataTypeOk() (*RawDataType, bool) {
	if o == nil || IsNil(o.RawDataType) {
		return nil, false
	}
	return o.RawDataType, true
}

// HasRawDataType returns a boolean if a field has been set.
func (o *GetRawDataInDataView200Response) HasRawDataType() bool {
	if o != nil && !IsNil(o.RawDataType) {
		return true
	}

	return false
}

// SetRawDataType gets a reference to the given RawDataType and assigns it to the RawDataType field.
func (o *GetRawDataInDataView200Response) SetRawDataType(v RawDataType) {
	o.RawDataType = &v
}

// GetRawDataList returns the RawDataList field value if set, zero value otherwise.
func (o *GetRawDataInDataView200Response) GetRawDataList() []RawDataListItem {
	if o == nil || IsNil(o.RawDataList) {
		var ret []RawDataListItem
		return ret
	}
	return o.RawDataList
}

// GetRawDataListOk returns a tuple with the RawDataList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRawDataInDataView200Response) GetRawDataListOk() ([]RawDataListItem, bool) {
	if o == nil || IsNil(o.RawDataList) {
		return nil, false
	}
	return o.RawDataList, true
}

// HasRawDataList returns a boolean if a field has been set.
func (o *GetRawDataInDataView200Response) HasRawDataList() bool {
	if o != nil && !IsNil(o.RawDataList) {
		return true
	}

	return false
}

// SetRawDataList gets a reference to the given []RawDataListItem and assigns it to the RawDataList field.
func (o *GetRawDataInDataView200Response) SetRawDataList(v []RawDataListItem) {
	o.RawDataList = v
}

func (o GetRawDataInDataView200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRawDataInDataView200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RawDataType) {
		toSerialize["rawDataType"] = o.RawDataType
	}
	if !IsNil(o.RawDataList) {
		toSerialize["rawDataList"] = o.RawDataList
	}
	return toSerialize, nil
}

type NullableGetRawDataInDataView200Response struct {
	value *GetRawDataInDataView200Response
	isSet bool
}

func (v NullableGetRawDataInDataView200Response) Get() *GetRawDataInDataView200Response {
	return v.value
}

func (v *NullableGetRawDataInDataView200Response) Set(val *GetRawDataInDataView200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRawDataInDataView200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRawDataInDataView200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRawDataInDataView200Response(val *GetRawDataInDataView200Response) *NullableGetRawDataInDataView200Response {
	return &NullableGetRawDataInDataView200Response{value: val, isSet: true}
}

func (v NullableGetRawDataInDataView200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRawDataInDataView200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


