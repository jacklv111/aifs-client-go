/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
	"fmt"
)

// DataViewType the model 'DataViewType'
type DataViewType string

// List of DataViewType
const (
	RAW_DATA DataViewType = "raw-data"
	ANNOTATION DataViewType = "annotation"
	MODEL DataViewType = "model"
	DATASET_ZIP DataViewType = "dataset-zip"
	ARTIFACT DataViewType = "artifact"
)

// All allowed values of DataViewType enum
var AllowedDataViewTypeEnumValues = []DataViewType{
	"raw-data",
	"annotation",
	"model",
	"dataset-zip",
	"artifact",
}

func (v *DataViewType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataViewType(value)
	for _, existing := range AllowedDataViewTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataViewType", value)
}

// NewDataViewTypeFromValue returns a pointer to a valid DataViewType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataViewTypeFromValue(v string) (*DataViewType, error) {
	ev := DataViewType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataViewType: valid values are %v", v, AllowedDataViewTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataViewType) IsValid() bool {
	for _, existing := range AllowedDataViewTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataViewType value
func (v DataViewType) Ptr() *DataViewType {
	return &v
}

type NullableDataViewType struct {
	value *DataViewType
	isSet bool
}

func (v NullableDataViewType) Get() *DataViewType {
	return v.value
}

func (v *NullableDataViewType) Set(val *DataViewType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataViewType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataViewType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataViewType(val *DataViewType) *NullableDataViewType {
	return &NullableDataViewType{value: val, isSet: true}
}

func (v NullableDataViewType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataViewType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

