/*
Aifs api

aifs api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aifsclientgo

import (
	"encoding/json"
)

// checks if the DataViewListItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataViewListItem{}

// DataViewListItem struct for DataViewListItem
type DataViewListItem struct {
	// the id of the data view
	Id *string `json:"id,omitempty"`
	// the name of the data view
	Name *string `json:"name,omitempty"`
	ViewType *DataViewType `json:"viewType,omitempty"`
	RawDataType *RawDataType `json:"rawDataType,omitempty"`
	// if data view is an annotation view, it has annotation template id
	AnnotationTemplateId *string `json:"annotationTemplateId,omitempty"`
	// if data view is an annotation view, it has annotation template type
	AnnotationTemplateType *string `json:"annotationTemplateType,omitempty"`
	// Unix timestamp in ms
	CreateAt *int64 `json:"createAt,omitempty"`
}

// NewDataViewListItem instantiates a new DataViewListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataViewListItem() *DataViewListItem {
	this := DataViewListItem{}
	return &this
}

// NewDataViewListItemWithDefaults instantiates a new DataViewListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataViewListItemWithDefaults() *DataViewListItem {
	this := DataViewListItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataViewListItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataViewListItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataViewListItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataViewListItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataViewListItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataViewListItem) SetName(v string) {
	o.Name = &v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *DataViewListItem) GetViewType() DataViewType {
	if o == nil || IsNil(o.ViewType) {
		var ret DataViewType
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetViewTypeOk() (*DataViewType, bool) {
	if o == nil || IsNil(o.ViewType) {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *DataViewListItem) HasViewType() bool {
	if o != nil && !IsNil(o.ViewType) {
		return true
	}

	return false
}

// SetViewType gets a reference to the given DataViewType and assigns it to the ViewType field.
func (o *DataViewListItem) SetViewType(v DataViewType) {
	o.ViewType = &v
}

// GetRawDataType returns the RawDataType field value if set, zero value otherwise.
func (o *DataViewListItem) GetRawDataType() RawDataType {
	if o == nil || IsNil(o.RawDataType) {
		var ret RawDataType
		return ret
	}
	return *o.RawDataType
}

// GetRawDataTypeOk returns a tuple with the RawDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetRawDataTypeOk() (*RawDataType, bool) {
	if o == nil || IsNil(o.RawDataType) {
		return nil, false
	}
	return o.RawDataType, true
}

// HasRawDataType returns a boolean if a field has been set.
func (o *DataViewListItem) HasRawDataType() bool {
	if o != nil && !IsNil(o.RawDataType) {
		return true
	}

	return false
}

// SetRawDataType gets a reference to the given RawDataType and assigns it to the RawDataType field.
func (o *DataViewListItem) SetRawDataType(v RawDataType) {
	o.RawDataType = &v
}

// GetAnnotationTemplateId returns the AnnotationTemplateId field value if set, zero value otherwise.
func (o *DataViewListItem) GetAnnotationTemplateId() string {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateId
}

// GetAnnotationTemplateIdOk returns a tuple with the AnnotationTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetAnnotationTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateId) {
		return nil, false
	}
	return o.AnnotationTemplateId, true
}

// HasAnnotationTemplateId returns a boolean if a field has been set.
func (o *DataViewListItem) HasAnnotationTemplateId() bool {
	if o != nil && !IsNil(o.AnnotationTemplateId) {
		return true
	}

	return false
}

// SetAnnotationTemplateId gets a reference to the given string and assigns it to the AnnotationTemplateId field.
func (o *DataViewListItem) SetAnnotationTemplateId(v string) {
	o.AnnotationTemplateId = &v
}

// GetAnnotationTemplateType returns the AnnotationTemplateType field value if set, zero value otherwise.
func (o *DataViewListItem) GetAnnotationTemplateType() string {
	if o == nil || IsNil(o.AnnotationTemplateType) {
		var ret string
		return ret
	}
	return *o.AnnotationTemplateType
}

// GetAnnotationTemplateTypeOk returns a tuple with the AnnotationTemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetAnnotationTemplateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationTemplateType) {
		return nil, false
	}
	return o.AnnotationTemplateType, true
}

// HasAnnotationTemplateType returns a boolean if a field has been set.
func (o *DataViewListItem) HasAnnotationTemplateType() bool {
	if o != nil && !IsNil(o.AnnotationTemplateType) {
		return true
	}

	return false
}

// SetAnnotationTemplateType gets a reference to the given string and assigns it to the AnnotationTemplateType field.
func (o *DataViewListItem) SetAnnotationTemplateType(v string) {
	o.AnnotationTemplateType = &v
}

// GetCreateAt returns the CreateAt field value if set, zero value otherwise.
func (o *DataViewListItem) GetCreateAt() int64 {
	if o == nil || IsNil(o.CreateAt) {
		var ret int64
		return ret
	}
	return *o.CreateAt
}

// GetCreateAtOk returns a tuple with the CreateAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataViewListItem) GetCreateAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreateAt) {
		return nil, false
	}
	return o.CreateAt, true
}

// HasCreateAt returns a boolean if a field has been set.
func (o *DataViewListItem) HasCreateAt() bool {
	if o != nil && !IsNil(o.CreateAt) {
		return true
	}

	return false
}

// SetCreateAt gets a reference to the given int64 and assigns it to the CreateAt field.
func (o *DataViewListItem) SetCreateAt(v int64) {
	o.CreateAt = &v
}

func (o DataViewListItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataViewListItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ViewType) {
		toSerialize["viewType"] = o.ViewType
	}
	if !IsNil(o.RawDataType) {
		toSerialize["rawDataType"] = o.RawDataType
	}
	if !IsNil(o.AnnotationTemplateId) {
		toSerialize["annotationTemplateId"] = o.AnnotationTemplateId
	}
	if !IsNil(o.AnnotationTemplateType) {
		toSerialize["annotationTemplateType"] = o.AnnotationTemplateType
	}
	if !IsNil(o.CreateAt) {
		toSerialize["createAt"] = o.CreateAt
	}
	return toSerialize, nil
}

type NullableDataViewListItem struct {
	value *DataViewListItem
	isSet bool
}

func (v NullableDataViewListItem) Get() *DataViewListItem {
	return v.value
}

func (v *NullableDataViewListItem) Set(val *DataViewListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDataViewListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDataViewListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataViewListItem(val *DataViewListItem) *NullableDataViewListItem {
	return &NullableDataViewListItem{value: val, isSet: true}
}

func (v NullableDataViewListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataViewListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


